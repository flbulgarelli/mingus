grammar org.uqbar.mingus.Mingus hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate mingus "http://www.uqbar-project.org/mingus/Mingus"

Program:
  value=Term;

  //================TERM PRECEDENCES==============
Term returns Term:
  Term0;

Term0 returns Term:
  Term1 | Letrec | Let;

Term1 returns Term:
  Term2 | Abstraction;
  
Term2 returns Term:
  Term3 | PatternMatching
;  

Term3 returns Term:
  Term4 ({Application.function=current} argument=Term4)* 
  | PrimitiveApplication 
  | ConstructorApplication 
  | If;

Term4 returns Term:
  Term5 | Suspention | Forcing;

Term5 returns Term:
  Term6 | Variable | Literal;

Term6 returns Term:
  '(' Term0 ')';

  //================EXPLICIT TERMS==============
Abstraction:
  '\\' parameter=ID '.' body=Term0;

Variable:
  name=ID;

Literal:
  NumberLiteral | StringLiteral;

NumberLiteral:
  value=INT;

StringLiteral:
  value=STRING;

Letrec:
  'letrec' bindings+=TaggedTerm (SEPARATOR bindings+=TaggedTerm)* 'in' body=Term0;

Let:
  'let' bindings+=TaggedTerm (SEPARATOR bindings+=TaggedTerm)* 'in' body=Term0;

If:
  'if' condition=Term4 ifTrue=Term4 ifFalse=Term4;

PrimitiveApplication:
  'prim' name=ID args+=Term4*;

ConstructorApplication:
  'cons' tag=ID values=TaggedTermSet;

Suspention:
  '@' value=Term5;

Forcing:
  '!' value=Term5;
  
PatternMatching: 
  'case' value=Term3 'of' clauses+=PatternMatchingClause (SEPARATOR clauses+=PatternMatchingClause)*
;  

//===============Patterns===============

PatternMatchingClause:
  pattern=Pattern '=>' result=Term3
;

Pattern:
  Variable | Literal | DeconstructionApplication
;

DeconstructionApplication:
  tag=ID values=TaggedPatternSet
;

//===============Pattern Partials===============
TaggedPattern: 
  name=ID '=' value=Variable
;

TaggedPatternSet:
  {TaggedPatternSet} '{' (elements+=TaggedPattern (SEPARATOR elements+=TaggedPattern)*)? '}';

//===============Term Partials===============
TaggedTerm:
  name=ID '=' value=Term1;

TaggedTermSet:
  {TaggedTermSet} '{' (elements+=TaggedTerm (SEPARATOR elements+=TaggedTerm)*)? '}';

//============TERMINALS======================
terminal SEPARATOR:
  ',';

terminal ID:
  ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* |
  '==' |
  '!!' |
  ('~' | '$' | '+' | '-' | '?' | '%' | '>' | '<' | '^' | '&' | '|' | '*' | '/' | ':')
  ('~' | '$' | '+' | '-' | '?' | '%' | '>' | '<' | '^' | '&' | '|' | '*' | '/' | '=' | '!' | '@')*;

terminal INT returns ecore::EInt:
  ('0'..'9')+;

terminal STRING:
  '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
  "'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_COMMENT:
  '{-'->'-}';

terminal SL_COMMENT:
  '--' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
  (' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
  .;